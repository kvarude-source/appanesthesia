const URL = "./model/";
let model, webcam, labelContainer, maxPredictions;

// ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á
async function loadCameraList() {
  const select = document.getElementById("cameraSelect");
  select.innerHTML = "";

  try {
    // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ browser ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á
    await navigator.mediaDevices.getUserMedia({ video: true });
  } catch (err) {
    console.warn("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏•‡πâ‡∏≠‡∏á:", err);
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà");
    return;
  }

  try {
    const devices = await navigator.mediaDevices.enumerateDevices();
    const videoDevices = devices.filter(d => d.kind === "videoinput");

    if (videoDevices.length === 0) {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ");
      return;
    }

    videoDevices.forEach((device, index) => {
      const option = document.createElement("option");
      option.value = device.deviceId;
      const label = (device.label || "").toLowerCase();

      if (label.includes("front") || label.includes("selfie")) {
        option.text = "üì± ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤";
      } else if (label.includes("back") || label.includes("rear") || label.includes("environment")) {
        option.text = "üé• ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á";
      } else {
        option.text = `‡∏Å‡∏•‡πâ‡∏≠‡∏á ${index + 1}`;
      }
      select.appendChild(option);
    });

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const defaultIndex = Array.from(select.options).findIndex(opt => opt.text.includes("‡∏´‡∏•‡∏±‡∏á"));
    select.selectedIndex = defaultIndex >= 0 ? defaultIndex : 0;

    console.log("‚úÖ ‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", videoDevices.length);
  } catch (err) {
    console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
  }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á + ‡πÇ‡∏°‡πÄ‡∏î‡∏•
async function init() {
  const modelURL = URL + "model.json";
  const metadataURL = URL + "metadata.json";

  try {
    if (!model) {
      model = await tmImage.load(modelURL, metadataURL);
      maxPredictions = model.getTotalClasses();
    }
  } catch (err) {
    alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô /model/");
    console.error("Model load error:", err);
    return;
  }

  // ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (webcam && webcam.stop) webcam.stop();

  const select = document.getElementById("cameraSelect");
  const selectedDeviceId = select.value;
  const selectedLabel = select.options[select.selectedIndex]?.text.toLowerCase() || "";
  const flip = selectedLabel.includes("‡∏´‡∏ô‡πâ‡∏≤") || selectedLabel.includes("front");

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ fallback
  let constraints = { video: { facingMode: "environment" }, audio: false };
  if (selectedDeviceId) {
    constraints = { video: { deviceId: { exact: selectedDeviceId } }, audio: false };
  }

  try {
    webcam = new tmImage.Webcam(400, 300, flip);
    await webcam.setup(constraints);
    await webcam.play();
    window.requestAnimationFrame(loop);
  } catch (err) {
    console.error("‚ö†Ô∏è webcam.setup/play failed:", err);
    alert("‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö");
    return;
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πâ‡∏≠‡∏á
  const webcamContainer = document.getElementById("webcam-container");
  webcamContainer.innerHTML = "";
  webcamContainer.appendChild(webcam.canvas);

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° label
  labelContainer = document.getElementById("label-container");
  labelContainer.innerHTML = "";
  for (let i = 0; i < maxPredictions; i++) {
    labelContainer.appendChild(document.createElement("div"));
  }

  // ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î
  const startButton = document.getElementById("startButton");
  startButton.disabled = true;
  startButton.innerText = "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...";

  setTimeout(() => {
    startButton.disabled = false;
    startButton.innerHTML = "üé¨";
  }, 1500);
}

// loop ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
async function loop() {
  if (!webcam) return;
  webcam.update();
  await predict();
  window.requestAnimationFrame(loop);
}

// ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πâ‡∏≠‡∏á
async function predict() {
  if (!model || !webcam) return;
  const prediction = await model.predict(webcam.canvas);
  for (let i = 0; i < maxPredictions; i++) {
    const classPrediction =
      prediction[i].className +
      ": " +
      (prediction[i].probability * 100).toFixed(2) +
      "%";
    labelContainer.childNodes[i].innerHTML = classPrediction;
  }
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏õ‡∏¥‡∏î
window.addEventListener("load", loadCameraList);
